from random import randint, sample, shuffle
from itertools import product
import numpy as np

# –î–û–ì–û–í–ê–†–ò–í–ê–ï–ú–°–Ø –û –¢–û–ú, –ö–ê–ö –ü–ò–°–ê–¢–¨ –ö–û–û–†–î–ò–ù–ê–¢–´
# –û–¢–•–û–î–ò–ú –û–¢ –°–¢–ê–ù–î–ê–†–¢–ù–´–• x, y
# –ü–ï–†–í–û–ï –ß–ò–°–õ–û ‚Äì –≠–¢–û –°–¢–†–û–ö–ê –í PLAYFIELD
# –í–¢–û–†–û–ï –ß–ò–°–õ–û ‚Äì –≠–¢–û –°–¢–û–õ–ë–ï–¶ –í PLAYFIELD

"""
	0| 1| 2| 3| 4| 5| 6| 7| 8| 9|
0 |__|__|__|__|__|__|__|__|__|__|
1 |__|__|__|__|__|__|__|__|__|__|
2 |__|__|__|__|__|__|__|__|__|__|
3 |__|__|__|__|__|__|__|__|__|__|
4 |__|__|__|__|__|__|__|__|__|__|
5 |__|__|__|__|__|__|__|__|__|__|
6 |__|__|__|__|__|__|__|__|__|__|
7 |__|__|__|__|__|__|__|__|__|__|
8 |__|__|__|__|__|__|__|__|__|__|
9 |__|__|__|__|__|__|__|__|__|__|
"""

# TODO: –∫–∞–∫-–Ω–∏–±—É–¥—å –ø–æ—É–º–Ω–µ–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–º–æ–≤ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ generate_house_coordinates

def generate_n_tiles(n, occupied):
	random_line = randint(0, 9)
	random_column = randint(0, 9)
	start_coords = [random_line, random_column]

	# –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–∞–π–ª–∞ –Ω–µ –∑–∞–Ω—è—Ç–∞,
	if start_coords not in occupied:
		# –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤–ø—Ä–∞–≤–æ –æ—Ç —ç—Ç–æ–≥–æ —Ç–∞–π–ª–∞ –¥–µ–ª–∞—Ç—å –∏–ª–∏ –≤–ª–µ–≤–æ
		if start_coords[1] + n <= 9:
			# –ó–∞–≥–æ—Ç–æ–≤–∏—Ç—å –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫
			list_of_coordinates = [[]]*(n-1)
			for i in range((n-1)):
				list_of_coordinates[i] = [random_line, random_column + (i+1)]
			# –ù–∞–¥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ—Ç –ª–∏ —Å—Ä–µ–¥–∏ –Ω–æ–≤—ã—Ö —Å–≥–µ–Ω–µ—Ä–µ–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —É—ç–µ –∑–∞–Ω—è—Ç—ã—Ö
			for c in list_of_coordinates:
				if c in occupied:
					return generate_n_tiles(n, occupied)
			list_of_coordinates.insert(0, start_coords)
			return list_of_coordinates
		else:
			# –ó–∞–≥–æ—Ç–æ–≤–∏—Ç—å –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫
			list_of_coordinates = [[]]*(n-1)
			substract_term = 1
			for i in range((n-1)):
				list_of_coordinates[i] = [random_line, random_column + (i-substract_term)]
				substract_term += 2
			# –ù–∞–¥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ—Ç –ª–∏ —Å—Ä–µ–¥–∏ –Ω–æ–≤—ã—Ö —Å–≥–µ–Ω–µ—Ä–µ–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —É—ç–µ –∑–∞–Ω—è—Ç—ã—Ö
			for c in list_of_coordinates:
				if c in occupied:
					return generate_n_tiles(n, occupied)
			list_of_coordinates.insert(0, start_coords)
			return list_of_coordinates
	# –ê –µ—Å–ª–∏ –∑–∞–Ω—è—Ç–∞, —Ç–æ –∑–∞–Ω–æ–≤–æ —Å–≥–µ–Ω–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ç–∞–π–ª –∏ –Ω–∞—á–∞—Ç—å –æ—Ç –Ω–µ–≥–æ —Å—Ç—Ä–æ–∏—Ç—å
	else:
		return generate_n_tiles(n, occupied)


# print(generate_n_tiles(1, [[0, 5], [9, 0], [9, 9]]))

def get_occupied_coords(currently_occupied, new_house_coords):
	"""
	–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –∑–∞–Ω—è—Ç—ã—Ö –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—ã—Ö –∫–æ–æ–¥–∏–Ω–∞—Ç
	"""
	for coords in new_house_coords:
		current_y = [coords[0]-1, coords[0], coords[0] + 1]
		current_x = [coords[1]-1, coords[1], coords[1] + 1]
		occupied_for_one_tile = list(product(current_y, current_x))
		for c_set in occupied_for_one_tile:
			if list(c_set) not in currently_occupied:
				currently_occupied.append(list(c_set))
	return currently_occupied

def get_lucky_coins_coords(unoccupied):
	"""
	–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–æ–Ω–µ—Ç–æ–∫
	"""
	random_coordinate_indices = sample(range(len(unoccupied)), 8)
	shuffle(random_coordinate_indices)
	return [unoccupied[i] for i in random_coordinate_indices]

def generate_house_coordinates(playfield):
	"""
	–ü—Ä–∏–Ω–∏–º–∞–µ—Ç: np-–º–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: np-–º–∞—Å—Å–∏–≤ —Å —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–æ–º–∞–º–∏
	"""
	# –ß—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å:
	# 1. –ü–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–º –∏–∑ 4-—Ö —Ç–∞–π–ª–æ–≤, –ø–æ–∫–∞ –≤—Å—ë –ø–æ–ª–µ —Å–≤–æ–±–æ–¥–Ω–æ
	# 	 - –ú–± —ç—Ç–æ—Ç –¥–æ–º –≤–æ–æ–±—â–µ –Ω–µ –Ω—É–∂–µ–Ω?
	# 2. –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Å–µ—Ö 
	#  	 4 —Ç–∞–π–ª–æ–≤ ¬± 1 –ø–æ –∏–∫—Å—É –∏ –∏–≥—Ä–µ–∫—É
	# 3. –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–æ–º–∞, –ø—Ä–æ–≤–µ—Ä—è—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
	# 
	# –õ–∏–±–æ –º–æ–∂–Ω–æ –ø–æ–π—Ç–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç!
	# –°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –º–∞–ª–µ–Ω—å–∫–∏–µ –¥–æ–º–∞, –ø–æ—Ç–æ–º —Å–¥–µ–ª–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö 
	# –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ –ø–æ –Ω–∏–º —Ä–∞—Å—Å—Ç–∞–≤–ª—è—Ç—å 2-–µ –¥–æ–º–∞, –ø–æ—Ç–æ–º 3-–µ –∏ –µ—Å–ª–∏ 
	# –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –º–µ—Å—Ç–æ ‚Äì 4–æ–π.

	preoccupied_coordinates = [[0, 5], [9, 0], [9, 9]]

	tiles_4_hc = generate_n_tiles(4, preoccupied_coordinates)
	# print(f"tiles_4_hc: {tiles_4_hc}")
	for coords_set in tiles_4_hc:
		playfield[coords_set[0]][coords_set[1]] = 4

	occupied_coords = get_occupied_coords(preoccupied_coordinates, tiles_4_hc)

	tiles_3_hc_1 = generate_n_tiles(3, occupied_coords)
	# print(f"tiles_3_hc_1: {tiles_3_hc_1}")
	for coords_set in tiles_3_hc_1:
		playfield[coords_set[0]][coords_set[1]] = 4

	occupied_coords = get_occupied_coords(occupied_coords, tiles_3_hc_1)

	tiles_3_hc_2 = generate_n_tiles(3, occupied_coords)
	# print(f"tiles_3_hc_2: {tiles_3_hc_2}")
	for coords_set in tiles_3_hc_2:
		playfield[coords_set[0]][coords_set[1]] = 4

	occupied_coords = get_occupied_coords(occupied_coords, tiles_3_hc_2)

	for m in range(3):
		tiles_2_hc = generate_n_tiles(2, occupied_coords)
		# print(f"tiles_2_hc: {tiles_2_hc}")
		for coords_set in tiles_2_hc:
			playfield[coords_set[0]][coords_set[1]] = 4
		occupied_coords = get_occupied_coords(occupied_coords, tiles_2_hc)

	for m in range(4):
		tiles_1_hc = generate_n_tiles(1, occupied_coords)
		# print(f"tiles_1_hc: {tiles_1_hc}")
		playfield[tiles_1_hc[0][0]][tiles_1_hc[0][1]] = 4
		occupied_coords = get_occupied_coords(occupied_coords, tiles_1_hc)
	
	# print(playfield)

	inds = np.where(playfield == 0)
	print("\n")
	unoccupied_coordinates = []
	for one, two in zip(inds[0], inds[1]):
		unoccupied_coordinates.append([one, two])

	lucky_coins_coordinates = get_lucky_coins_coords(unoccupied_coordinates)
	for coin_coords in lucky_coins_coordinates:
		playfield[coin_coords[0]][coin_coords[1]] = 5

	return playfield, occupied_coords, lucky_coins_coordinates

# –°–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç —É–¥–∞—á–∏ –µ—Å—Ç—å —É –±–∞–Ω–¥–∏—Ç–æ–≤ –∏ –∫–æ–ø–æ–≤ (–ø–æ –Ω—É–ª—è–º –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã)
crooks_coins = 0
cops_coins = 0

# –°–∫–æ–ª—å–∫–æ –±–ª–æ–∫–æ–≤ –µ—Å—Ç—å —É –±–∞–Ω–¥–∏—Ç–æ–≤ –∏ –∫–æ–ø–æ–≤ –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
crooks_blocks = 1
cops_blocks = 3

def render_playfield(playfield):
	"""
	–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞ np-–º–∞—Å—Å–∏–≤–æ–≤
	–î–µ–ª–∞–µ—Ç –∏–∑ –Ω–∏—Ö —Å—Ç—Ä–æ–∫–∏
	–ó–∞–º–µ–Ω—è–µ—Ç —Ü–∏—Ñ—Ä—ã –Ω–∞ —ç–º–æ–¥–∑–∏
	–í—ã–≤–æ–¥–∏—Ç –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –≤ –∫—Ä–∞—Å–∏–≤–æ–º –≤–∏–¥–µ
	"""
	# 0 ‚Äì —Å–≤–æ–±–æ–¥–Ω–∞—è –∫–ª–µ—Ç–∫–∞
	# 1 ‚Äì –≤—ã—Ö–æ–¥
	# 2 ‚Äì –∏–≥—Ä–æ–∫ 1 (—É–±–µ–≥–∞—é—â–∏–π)
	# 3 ‚Äì –∏–≥—Ä–æ–∫ 2 (–¥–æ–≥–æ–Ω—è—é—â–∏–π)
	# 4 ‚Äì –æ–¥–∏–Ω —Ç–∞–π–ª –∑–¥–∞–Ω–∏—è
	# 5 ‚Äì –º–æ–Ω–µ—Ç–∞ —É–¥–∞—á–∏
	# 6 ‚Äì –±–ª–æ–∫ –¥–æ–≥–æ–Ω—è—é—â–µ–≥–æ
	# 7 ‚Äì –±–ª–æ–∫ —É–±–µ–≥–∞—é—â–µ–≥–æ
	# 8 - –ø—É—Ç—å –∏–≥—Ä–æ–∫–∞ 1
	# 9 ‚Äì –ø—É—Ç—å –∏–≥—Ä–æ–∫–∞ 2

	playfield = playfield.astype(str)
	playfield[playfield == "0"] = "_"
	playfield[playfield == "1"] = "üöÅ"
	playfield[playfield == "2"] = "üöò"
	playfield[playfield == "3"] = "üöî"
	playfield[playfield == "4"] = "üè†"
	playfield[playfield == "5"] = "‚ú®"
	playfield[playfield == "6"] = "üöß"
	playfield[playfield == "7"] = "üí£"
	playfield[playfield == "8"] = "‚ô¶Ô∏è"
	playfield[playfield == "9"] = "üîπ"

	string = ""
	for i in range(10):
		string += f" {i} |"
	print("  |"+ string + f"\tCops lucky coins: {cops_coins}, cops blocks: {cops_blocks}")
	print("  " + "_"*40 + f"\tCrooks lucky coins: {crooks_coins}, crooks_blocks: {crooks_blocks}")
	for index, row in enumerate(playfield.astype(str)):
		final = ""
		for item in row:
			if item == "_":
				final += f"_{item}_|"
			else:	
				final += f"_{item} |"
		print(f"{index} |" + final)
		# row_string = " | ".join(row)
		# print("| " + row_string + " |")
		# print("| " + "_"*len(row_string) + " |")

def cops_move(playfield, occupied, lucky):
	"""
	–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
	–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–≥—Ä–æ–∫–∞
	–õ–∏–±–æ –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º
	–õ–∏–±–æ –¥–µ–ª–∞–µ—Ç —Ç–æ, —á—Ç–æ —Å–∫–∞–∑–∞–Ω–æ, –æ–±–Ω–æ–≤–ª—è—è playfield 
	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π playfield
	"""

	global cops_coins
	
	cops_raw_input = input("> ")
	cops_input = cops_raw_input.split()

	if len(cops_input) != 3:
		print("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")
		return cops_move(playfield, occupied, lucky)

	# –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ —Ä–µ—à–∏–ª –ø–µ—Ä–µ–¥–≤–∏–Ω—É—Ç—å—Å—è
	if cops_input[0] == "move":
		# –Ω–∞–¥–æ —É–∑–Ω–∞—Ç—å, –≥–¥–µ –∏–≥—Ä–æ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–µ–π—á–∞—Å
		# –ø–µ—Ä–≤–æ–µ –≤—Ä–æ–¥–µ y, –≤—Ç–æ—Ä–æ–µ ‚Äì x

		available_to_move = np.where(playfield == 0)

		available_to_move = [[row, col] for row, col in zip(available_to_move[0], available_to_move[1])]


		current_cops_coords = np.where(playfield == 3)
		cops_row = current_cops_coords[0][0]
		cops_column = current_cops_coords[1][0]

		# –∏ –∫—É–¥–∞ –æ–Ω –≤–æ–æ–±—â–µ –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥–≤–∏–Ω—É—Ç—å—Å—è
		# –ª–∏–±–æ row ¬± 1, –ª–∏–±–æ column ¬± 1
		cops_possible_coords = [[cops_row, cops_column-1], 
							   [cops_row, cops_column+1],
							   [cops_row-1, cops_column],
							   [cops_row+1, cops_column]]

		# URGENT TODO: –Ω—É–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–¥–∞–Ω–∏—è –∏ –º–æ–Ω–µ—Ç–∫–∏!
		# UPD: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–¥–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç, –∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–æ–Ω–µ—Ç–∫–∏ –Ω–µ –¥–∞–µ—Ç —Å—Ö–æ–¥–∏—Ç—å –Ω–∞—Å—Ç—É–ø–∏–≤ –Ω–∞ –º–æ–Ω–µ—Ç–∫—É
		cops_move_allowed_coords = [i for i in cops_possible_coords if all(n in range(0, 10) for n in i) and i in available_to_move]
		print(cops_move_allowed_coords)
		# print(occupied)
		cops_move_allowed_coords = list(filter(lambda x: x in available_to_move, cops_move_allowed_coords))
		# –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–æ–Ω–µ—Ç–æ–∫ —É–¥–∞—á–∏ –∫–∞–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∞ –Ω–∏—Ö –Ω—É–∂–Ω–æ —Ö–æ–¥–∏—Ç—å
		cops_move_allowed_coords.extend(lucky)
		print(cops_move_allowed_coords)
		
		# —Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –∑–∞—Ö–æ—Ç–µ–ª –∏–≥—Ä–æ–∫
		cops_input_row = int(cops_input[1])
		cops_input_column = int(cops_input[2])

		if [cops_input_row, cops_input_column] in cops_move_allowed_coords:
			# –Ω–∞–¥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ö–æ–¥–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ–π –º–æ–Ω–µ—Ç–∫–∏ —É–¥–∞—á–∏
			# –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –Ω–∞–¥–æ –¥–æ–±–≤–∏—Ç—å –∫–æ–ø–∞–º –æ–¥–Ω—É –º–æ–Ω–µ—Ç–∫—É
			if [cops_input_row, cops_input_column] in lucky:
				cops_coins += 1
				playfield[cops_row][cops_column] = 9
				occupied.append([cops_row, cops_column])
				playfield[cops_input_row][cops_input_column] = 3
				lucky.remove([cops_input_row, cops_input_column])
				return playfield, occupied, lucky
			else:
				playfield[cops_row][cops_column] = 9
				occupied.append([cops_row, cops_column])
				playfield[cops_input_row][cops_input_column] = 3
				return playfield, occupied, lucky
		else:
			print("–≠—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–≤–æ–¥")
			return cops_move(playfield, occupied, lucky)

		# –µ—Å–ª–∏ –µ–≥–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö, —Ç–æ –≤—Å—ë –æ–∫, 
		# –ø–µ—Ä–µ–¥–≤–∏–Ω—É—Ç—å —Ñ–∏–≥—É—Ä–∫—É —Ç—É–¥–∞, –∞ –Ω–∞ –ø—Ä–æ—à–ª—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É 

		# –∞ –ø–æ—Ç–æ–º 
	# –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ —Ä–µ—à–∏–ª –ø–æ—Å—Ç–∞–≤–∏—Ç—å –±–ª–æ–∫
	elif cops_input[0] == "block":
		pass
	# –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –≤–≤–µ–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É
	else:
		print("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
		return cops_move(playfield, occupied, lucky)

























